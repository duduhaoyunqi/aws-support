
您好：

感谢您联系 AWS 技术支持，我是工程师 Bright，今天将由我来协助您的工单。

以下一一回答您的问题：
1. 如何使用CloudWatch监控Direct Connect虚拟接口的BGP Status?
目前 DX 没有直接提供 BGP 相关的 Cloudwatch 指标，所以如果您想直接监控 BGP 状态，会需要自行创建一些监控机制，例如以下：
    (1). 使用定期触发的 Lambda 函数[1]，用 DescribeVirtualInterfaces API [2]抓取 vif 的 BGP 状态并推送到 Cloudwatch [3]。
    (2). 如果您实际上是想监控 AWS VPC 到地端网路的联通性与延迟，可以考虑使用 Cloudwatch Network Monitor [4][5]。

2.请帮忙解释为什么CloudWatch中DX只有以下 Metrics
这是因为您的 DX 都是托管连接(hosted connection)，只有专用连接(dedicated connection)才有 ConnectionBpsEgress 等指标[6]。

参考资料：
[2] 教程：使用 EventBridge 安排 AWS Lambda 函数
https://docs.aws.amazon.com/zh_cn/eventbridge/latest/userguide/eb-run-lambda-schedule.html 

[2] DescribeVirtualInterfaces
https://docs.aws.amazon.com/directconnect/latest/APIReference/API_DescribeVirtualInterfaces.html 

[3] PutMetricData
https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutMetricData.html 

#########################################################################################################################
https://stackify.com/custom-metrics-aws-lambda/
#AWS内部代码实现使用定期触发的 Lambda 函数，用 DescribeVirtualInterfaces API 抓取 vif 的 BGP 状态并推送到 Cloudwatch。

!/usr/bin/python
# Monitors the state of all DX Virtual Interfaces in the account and
# publishes a custom CloudWatch Metric for the status --- 1 = BGP Up, 0 = down
import boto.ec2.cloudwatch
import boto.directconnect
AWS_Regions=["eu-west-1"]
CloudWatch_Region="eu-west-1"
cw = boto.ec2.cloudwatch.connect_to_region(CloudWatch_Region)

for region in AWS_Regions:
  conn = boto.directconnect.connect_to_region(region)
  vifs = conn.describe_virtual_interfaces()
  for vif in vifs['virtualInterfaces']:
    vif_id = vif['virtualInterfaceId']
    vif_state = vif['virtualInterfaceState']
    vif_name = vif['virtualInterfaceName']
#    print vif_id+" ("+vif_name+") = "+vif_state
    if vif_state == "available":
      vif_up = 1
    else:
      vif_up = 0
 #   print vif_id+" has status "+str(vif_up)
    cw.put_metric_data("DX-VIF-Status", vif_id, value=vif_up, dimensions={'VIF': vif_id, 'Name': vif_name})


##############################################################################
Plugins，

我是 Edwin，我会继续处理您的案例，根据您之前跟 Peter 的沟通，我了解您希望抓取 DX VIF 的 BGP 状态并推送到 CloudWatch。我在实验环境中测试了一下这样的部署，我的脚本能够成功达到这样的目的，脚本内容您可以参考附件。

我的脚本逻辑大概是先通过 "describe_virtual_interfaces" 函数[1]抓取 VIF 的 BGP 状态，若为 "UP"，则调用 "put_metric_data" 函数[2]来推送一个数值为 "1" 的数据点，其他状态则一律推送一个数值为 "0" 的数据点，指标的维度我目前只用了 VIF ID，您还可以加入其他维度。

祝工作顺利！

参考文档：
[1] https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/directconnect/client/describe_virtual_interfaces.html 
[2] https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cloudwatch/client/put_metric_data.html 

import boto3

dxclient = boto3.client('directconnect', region_name='ap-southeast-1')
cwclient = boto3.client('cloudwatch', region_name='ap-southeast-1')

def put_vif_metric_data (id, state):
	response = cwclient.put_metric_data(
		Namespace='DX-VIF-Status',
		MetricData=[
			{
				'MetricName': 'DX-VIF-BGP-Status',
				'Dimensions': [
					{
						'Name': 'VirtualInterfaceId',
						'Value': id
					},
				],
				'Value': state,
				'Unit': 'None'
			},
		],
	)

virtualInterfaces = dxclient.describe_virtual_interfaces()['virtualInterfaces']

for v in virtualInterfaces:
	vif_id = v['virtualInterfaceId']
	#print(vif_id)
	status = v['bgpPeers'][0]['bgpStatus']
	#print(status)
	if status == 'up':
		put_vif_metric_data(vif_id, 1)
	else:
		put_vif_metric_data(vif_id, 0)

