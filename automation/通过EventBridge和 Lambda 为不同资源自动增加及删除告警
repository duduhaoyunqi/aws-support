https://aws.amazon.com/cn/blogs/mt/use-tags-to-create-and-maintain-amazon-cloudwatch-alarms-for-amazon-ec2-instances-part-1/

Plugins 您好，

感谢您联系 AWS 技术支持团队！我是 Edwin，很高兴能够在这个案例上协助您。

在稍前的线上会议中，我了解您有以下需求：

您的最终目的是希望通过 EventBridge 和 Lambda 的架构来为不同资源（例如：EC2，EBS，ELB）自动增加及删除 CloudWatch 告警。 

由于整个架构牵涉的部件比较多，我建议了我们可以先从以下两个方向入手：

1. 定义 EventBridge 的规则
我在实验环境中进行了不同测试，以下为各项情景对应的 API：
- 启动新的 EC2 实例：RunInstances [1]
- 创建新的 EBS Volume：CreateVolume [2] 
- 创建新的 ELB 或把 TargetGroup 挂到现有的 ELB 上：CreateListener [3]

基于以上的 API 内容，我认为相应的 EventBridge Pattern （事件模式 ）可以是这样：

{
  "source": ["aws.ec2", "aws.elasticloadbalancing"],
  "detail-type": ["AWS API Call via CloudTrail"],
  "detail": {
    "eventName": ["CreateVolume", "RunInstances", "CreateListener"]
  }
}

以上的事件模式将只会匹配到三类型的 API 事件，后续我们可以再加入其他删除的事件（例如：DeleteVolume）。

2. 定义 Lambda 的框架
根据第一步定义的事件模式，理论上只有三类型的事件会被传到 Lambda，我后续再跟据了这三类型的事件研究了 Lambda 的框架，思路大概是：
- 先判定事件的 'source' 栏位，目前我注意到 EC2 跟 EBS 都是 'aws.ec2'，ELB 则是 'aws.elasticloadbalancing'
- 然后抓取不同的变量并打印出来 
- 详细的内容您可以参考附件

您可以先参考一下我的建议来配置一下 EventBridge 规则跟 Lambda 函数，如果您有任何疑问或需要进一步的协助，欢迎您随时通过案例回复，我将持续跟进。

感谢您对 AWS 技术支持团队的支持！

参考文档：
[1] https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html 
[2] https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html 
[3] https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_CreateListener.html 

###################################################################

import json

def lambda_handler(event, context):
    event_detail = event.get('detail', {})

    # Check whether the source is ec2 or elb
    if 'source' in event and event['source'] == 'aws.ec2':

        # Check whether the event is CreateVolume or RunInstances
        if event_detail['eventName'] == 'CreateVolume':
            # Print the volumeId
            print("eventName: "+event_detail['eventName'])
            print("volumeId: "+event_detail['responseElements']['volumeId'])

        elif event_detail['eventName'] == 'RunInstances':
            # Print the instanceId and instanceName
            print("eventName: "+event_detail['eventName'])
            print("instanceId: "+event_detail['responseElements']['instancesSet']['items'][0]['instanceId'])
            print("instanceName: "+event_detail['responseElements']['instancesSet']['items'][0]['tagSet']['items'][0]['value'])

        else:
            print("Invalid Event")
        
    elif 'source' in event and event['source'] == 'aws.elasticloadbalancing':
        # Print the loadBalancerArn and targetGroupArn
        print("eventName: "+event_detail['eventName'])
        for i in event_detail['responseElements']['listeners']:
            print("loadBalancerArn: "+i['loadBalancerArn'])
            for j in i['defaultActions']:
                print("targetGroupArn: "+j['targetGroupArn'])

    else:

        print("This Lambda function is not triggered by EventBridge.")


############################################################################################
测试创建一个实例成功自动添加告警：

import json
import boto3

# Create CloudWatch client
cwclient = boto3.client('cloudwatch')
ec2client = boto3.client('ec2')


def lambda_handler(event, context):
    event_detail = event.get('detail', {})

    # Check whether the source is ec2 or elb
    # 字典里有这个source键？并且source键的值为aws.ec2
    if 'source' in event and event['source'] == 'aws.ec2':
        # Check whether the event is CreateVolume or RunInstances
        if event_detail['eventName'] == 'RunInstances':
            # Print the instanceId
            # print("eventName: "+event_detail['eventName'])
            # print("instanceId: "+event_detail['responseElements']['instancesSet']['items'][0]['instanceId'])

            sns_topic_arn = "arn:aws:sns:ap-southeast-1:259130762176:ConsoleLoginAlert"
            recover_action = "arn:aws:automate:ap-southeast-1:ec2:recover"
            
            instanceId = event_detail['responseElements']['instancesSet']['items'][0]['instanceId']

            #调用describe_tags通过实例id拿到实例Name
            response = ec2client.describe_tags(
                Filters=[
                    {
                        'Name': 'resource-id',
                        'Values': [instanceId],
                    },
                    {
                        'Name': 'key',
                        'Values': ['Name']
                    }
                ]
            )
            
            instanceName = response['Tags'][0]['Value']
            print(instanceName)

            alarm_name = f"(S3)EC2:StatusCheckFailed_System:*:{instanceName}"
            alarm_properties = {
            "AlarmName": alarm_name,
            "ActionsEnabled": True,
            "OKActions": [sns_topic_arn],
            "AlarmActions": [sns_topic_arn,recover_action],
            "InsufficientDataActions": [],
            "MetricName": "StatusCheckFailed_System",
            "Namespace": "AWS/EC2",
            "Statistic": "Maximum",
            "Dimensions": [
                {
                    "Name": "InstanceId",
                    "Value": instanceId
                }
            ],
            "Period": 60,
            "EvaluationPeriods": 1,
            "DatapointsToAlarm": 1,
            "Threshold": 0,
            "ComparisonOperator": "GreaterThanThreshold",
            "TreatMissingData": "missing"
            }
            # Create the alarm
            response = cwclient.put_metric_alarm(
                **alarm_properties
            )
            print(response)
        else:
            print("Invalid Event")
    else:
        print("This Lambda function is not triggered by EventBridge.")   
        
    return {
        'statusCode': 200,
        'body': 'Alarm creation process completed.'
    }

######################################################################
测试当实例创建时自动化创建两个告警system和instance alarm：

import json
import boto3

# Create CloudWatch client
cwclient = boto3.client('cloudwatch')
ec2client = boto3.client('ec2')


def lambda_handler(event, context):
    event_detail = event.get('detail', {})

    # Check whether the source is ec2 or elb
    # 字典里有这个source键？并且source键的值为aws.ec2
    if 'source' in event and event['source'] == 'aws.ec2':
        # Check whether the event is CreateVolume or RunInstances
        if event_detail['eventName'] == 'RunInstances':
            # Print the instanceId
            # print("eventName: "+event_detail['eventName'])
            # print("instanceId: "+event_detail['responseElements']['instancesSet']['items'][0]['instanceId'])

            sns_topic_arn = "arn:aws:sns:ap-southeast-1:259130762176:ConsoleLoginAlert"
            recover_action = "arn:aws:automate:ap-southeast-1:ec2:recover"
            instanceId = event_detail['responseElements']['instancesSet']['items'][0]['instanceId']
            instanceName = event_detail['responseElements']['instancesSet']['items'][0]['tagSet']['items'][0]['value']
            print(instanceName)

            system_alarm_name = f"(S3)EC2:StatusCheckFailed_System:*:{instanceName}"
            instance_alarm_name = f"(S3)EC2:StatusCheckFailed_Instance:*:{instanceName}"
            
            system_alarm_properties = {
            "AlarmName": system_alarm_name,
            "ActionsEnabled": True,
            "OKActions": [sns_topic_arn],
            "AlarmActions": [sns_topic_arn,recover_action],
            "InsufficientDataActions": [],
            "MetricName": "StatusCheckFailed_System",
            "Namespace": "AWS/EC2",
            "Statistic": "Maximum",
            "Dimensions": [
                {
                    "Name": "InstanceId",
                    "Value": instanceId
                }
            ],
            "Period": 60,
            "EvaluationPeriods": 1,
            "DatapointsToAlarm": 1,
            "Threshold": 0,
            "ComparisonOperator": "GreaterThanThreshold",
            "TreatMissingData": "missing"
            }
            # Create the system alarm
            response = cwclient.put_metric_alarm(
                **system_alarm_properties
            )
            print(response)

            instance_alarm_properties = {
                "AlarmName": instance_alarm_name,
                "ActionsEnabled": True,
                "OKActions": [sns_topic_arn],
                "AlarmActions": [sns_topic_arn],
                "InsufficientDataActions": [],
                "MetricName": "StatusCheckFailed_Instance",
                "Namespace": "AWS/EC2",
                "Statistic": "Maximum",
                "Dimensions": [
                    {
                        "Name": "InstanceId",
                        "Value": instanceId
                    }
                ],
                "Period": 60,
                "EvaluationPeriods": 6,
                "DatapointsToAlarm": 6,
                "Threshold": 0,
                "ComparisonOperator": "GreaterThanThreshold",
                "TreatMissingData": "breaching"
            }  
             # Create the instance alarm
            response = cwclient.put_metric_alarm(
                **instance_alarm_properties
            )
            print(response)
        else:
            print("Invalid Event")
    else:
        print("This Lambda function is not triggered by EventBridge.")   
        
    return {
        'statusCode': 200,
        'body': 'Alarm creation process completed.'
    }


#############################################################
测试ddh判断：

import json
import boto3

# Create CloudWatch client
cwclient = boto3.client('cloudwatch')
ec2client = boto3.client('ec2')


def lambda_handler(event, context):
    event_detail = event.get('detail', {})

    # Check whether the source is ec2 or elb
    # 字典里有这个source键？并且source键的值为aws.ec2
    if 'source' in event and event['source'] == 'aws.ec2':

        sns_topic_arn = "arn:aws:sns:ap-southeast-1:259130762176:ConsoleLoginAlert"
        recover_action = "arn:aws:automate:ap-southeast-1:ec2:recover"

        instanceId = event_detail['responseElements']['instancesSet']['items'][0]['instanceId']
        instanceName = event_detail['responseElements']['instancesSet']['items'][0]['tagSet']['items'][0]['value']

        system_alarm_name = f"(S3)EC2:StatusCheckFailed_System:*:{instanceName}"
        instance_alarm_name = f"(S3)EC2:StatusCheckFailed_Instance:*:{instanceName}"

        # Check whether the event is CreateVolume or RunInstances
        if event_detail['eventName'] == 'RunInstances' and event_detail['responseElements']['instancesSet']['items'][0]["placement"]["tenancy"] == 'default':
            
            system_alarm_properties = {
            "AlarmName": system_alarm_name,
            "ActionsEnabled": True,
            "OKActions": [sns_topic_arn],
            "AlarmActions": [sns_topic_arn,recover_action],
            "InsufficientDataActions": [],
            "MetricName": "StatusCheckFailed_System",
            "Namespace": "AWS/EC2",
            "Statistic": "Maximum",
            "Dimensions": [
                {
                    "Name": "InstanceId",
                    "Value": instanceId
                }
            ],
            "Period": 60,
            "EvaluationPeriods": 1,
            "DatapointsToAlarm": 1,
            "Threshold": 0,
            "ComparisonOperator": "GreaterThanThreshold",
            "TreatMissingData": "missing"
            }
            # Create the system alarm
            response = cwclient.put_metric_alarm(
                **system_alarm_properties
            )
            print(response)

            instance_alarm_properties = {
                "AlarmName": instance_alarm_name,
                "ActionsEnabled": True,
                "OKActions": [sns_topic_arn],
                "AlarmActions": [sns_topic_arn],
                "InsufficientDataActions": [],
                "MetricName": "StatusCheckFailed_Instance",
                "Namespace": "AWS/EC2",
                "Statistic": "Maximum",
                "Dimensions": [
                    {
                        "Name": "InstanceId",
                        "Value": instanceId
                    }
                ],
                "Period": 60,
                "EvaluationPeriods": 6,
                "DatapointsToAlarm": 6,
                "Threshold": 0,
                "ComparisonOperator": "GreaterThanThreshold",
                "TreatMissingData": "breaching"
            }  
             # Create the instance alarm
            response = cwclient.put_metric_alarm(
                **instance_alarm_properties
            )
            print(response)

        # Check whether the event is CreateVolume or RunInstances
        elif event_detail['eventName'] == 'RunInstances' and event_detail['responseElements']['instancesSet']['items'][0]["placement"]["tenancy"] == 'host':
            
            system_alarm_properties = {
            "AlarmName": system_alarm_name,
            "ActionsEnabled": True,
            "OKActions": [sns_topic_arn],
            "AlarmActions": [sns_topic_arn],
            "InsufficientDataActions": [],
            "MetricName": "StatusCheckFailed_System",
            "Namespace": "AWS/EC2",
            "Statistic": "Maximum",
            "Dimensions": [
                {
                    "Name": "InstanceId",
                    "Value": instanceId
                }
            ],
            "Period": 60,
            "EvaluationPeriods": 1,
            "DatapointsToAlarm": 1,
            "Threshold": 0,
            "ComparisonOperator": "GreaterThanThreshold",
            "TreatMissingData": "missing"
            }
            # Create the system alarm
            response = cwclient.put_metric_alarm(
                **system_alarm_properties
            )
            print(response)

            instance_alarm_properties = {
                "AlarmName": instance_alarm_name,
                "ActionsEnabled": True,
                "OKActions": [sns_topic_arn],
                "AlarmActions": [sns_topic_arn],
                "InsufficientDataActions": [],
                "MetricName": "StatusCheckFailed_Instance",
                "Namespace": "AWS/EC2",
                "Statistic": "Maximum",
                "Dimensions": [
                    {
                        "Name": "InstanceId",
                        "Value": instanceId
                    }
                ],
                "Period": 60,
                "EvaluationPeriods": 6,
                "DatapointsToAlarm": 6,
                "Threshold": 0,
                "ComparisonOperator": "GreaterThanThreshold",
                "TreatMissingData": "breaching"
            }  
             # Create the instance alarm
            response = cwclient.put_metric_alarm(
                **instance_alarm_properties
            )
            print(response)
        else:
            print("Invalid Event")
    else:
        print("This Lambda function is not triggered by EventBridge.")   
        
    return {
        'statusCode': 200,
        'body': 'Alarm creation process completed.'
    }
